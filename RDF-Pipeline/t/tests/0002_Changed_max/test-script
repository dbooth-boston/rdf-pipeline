#! /usr/bin/perl -w

# This script will be invoked by run-test.perl as:
#
#	cd '$TESTDIR'
# 	test-script '$RDF_PIPELINE_WWW_DIR'
#
# where $TESTDIR is the full path of the nnnn numbered test directory
# that is being tested, and $RDF_PIPELINE_WWW_DIR is the full path
# of the RDF Pipeline's Apache DOCUMENT_ROOT.
#
# You may customize any part of this script as needed for this test,
# though the most commonly customized part is marked "CUSTOMIZE HERE".  
# The script must exit(0) iff the test passes.

use strict;

my $wwwDir = shift @ARGV || $ENV{RDF_PIPELINE_WWW_DIR} || die;
# Ensure this env var is set, so that pipeline-request.perl can find it:
$ENV{RDF_PIPELINE_WWW_DIR} = $wwwDir;	

############ CUSTOMIZE HERE ################
my $testUrl = 'http://localhost/node/addone';
# Get rid of lm and cache directories, both here and $wwwDir:
!system("flush-caches") or die;
!system("../../helpers/copy-dir.perl -s /dev/null setup-files/lm") or die;
!system("../../helpers/copy-dir.perl -s /dev/null setup-files/cache") or die;
# Init max to 13:
!system("echo 13 > '$wwwDir/node/max.txt'") or die;
# Wait 1 second to ensure that a strong ETag is issued and any
# change will be detectable:
sleep 1;
# Run the pipeline, which should update every node:
!system("../../helpers/pipeline-request.perl GET '$testUrl'") or die;
# Run again, which should produce the same output without
# updating any nodes:
!system("../../helpers/pipeline-request.perl GET '$testUrl'") or die;
# Change max to 9:
!system("echo 9 > '$wwwDir/node/max.txt'") or die;
# Run again, and the result should not change:
!system("../../helpers/pipeline-request.perl GET '$testUrl'") or die;
# Flush the cache, and the change should not be visible:
!system("flush-caches") or die;
!system("../../helpers/pipeline-request.perl GET '$testUrl'") or die;
############################################

exit 0;

