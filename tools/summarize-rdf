#!/usr/bin/perl -w

use strict;

# Summary of schema implied by RDF instance data -- classes and predicates.
# Files are read from command line or stdin, in Turtle format.
#
# Copyright 2013 by David Booth
# Code home: http://code.google.com/p/rdf-pipeline/
# See license information at http://code.google.com/p/rdf-pipeline/ 
#
# Runtime: ~30 minutes / 600k triples
#
# EXAMPLE INPUT:
#    1. @prefix p: <http://purl.org/pipeline/ont#> .
#    2. @prefix : <http://localhost/node/> .
#    3. :max a p:FileNode . # No updater -- update manually.
#    4. :odds a p:FileNode ;
#    5.     p:inputs ( :max ) ;
#    6.     p:updater "odds-updater" .
#    7. :mult a p:FileNode ;
#    8.     p:inputs ( :odds <http://localhost/node/multiplier.txt> ) ;
#    9.     p:updater "mult-updater" .
#   10. :addone a p:FileNode ;
#   11.     p:inputs ( :mult ) ;
#   12.     p:updater "addone-updater" .
#   13. p:URI <http://www.w3.org/2000/01/rdf-schema#subClassOf> p:Node .
#
# EXAMPLE OUTPUT:
#     1. ===== Input Summary =====
#     2. Parsing turtle: /tmp/jin.ttl
#     3. Total triples: 19
#     4. Nodes by kind:  BLANK 4  LITERAL 3  URI 7
#     5. Literals by datatype:  UNTYPED 3
#     6.
#     7. ===== Predicates by Subject Class =====
#     8. p1:FileNode 4
#     9.   p1:inputs 3 -> { rdf:List 3 } 3
#    10.   p1:updater 3 -> { (UNTYPED) 3 } 3
#    11.   rdf:type 4 -> { rdfs:Class 1 } 1
#    12.
#    13. rdf:List 4
#    14.   rdf:first 4 -> { p1:FileNode 3 UNKNOWN 1 } 4
#    15.   rdf:rest 4 -> { rdf:List 2 } 2
#    16.
#    17. rdfs:Class 1
#    18.   rdfs:subClassOf 1 -> { rdfs:Class 1 } 1
#    19.
#    20. * Indicates a root class, whose instances are never objects.
#    21.
#    22. ===== Namespaces =====
#    23. PREFIX p1: <http://purl.org/pipeline/ont#>
#    24. PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
#    25. PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
#
# EXPLANATION OF OUTPUT:
# Numbers are instance counts.  Braces group a list of classes,
# because things can have more than one class.
#
# For brevity, class and predicate names have been shortened by
# stripping a presumed namespace (though not necessarily a namespace
# that you declared using @prefix).  Namespace prefixes are listed
# at the end (on lines 23-25), but they are not necessarily the
# same as the prefixes that were used in the input turtle, because
# the original prefixes are lost in parsing.
#
# Line 4 shows the number of distinct blank nodes, literals and URIs.
#
# Line 5 breaks down the literals by datatype, showing the number
# of distinct instances for each datatype.
#
# Line 8 indicates that there were 4 distinct p1:FileNode instances
# in the subject position of a triple.
#
# Line 9 indicates that the domain of p1:inputs included p1:FileNode,
# range included rdf:List, there were 3 triples having a p1:FileNode
# instance in the subject position and p1:inputs as predicate, and 
# there were 3 distinct rdf:List values in the object position of a triple.  
#
# Line 10 indicates that the range of p1:updater was a set of
# untyped literal values, and there were 3 distinct literals.
# A datatype range (as opposed to a class range) is indicated 
# in parentheses.  It also indiates that there were 3 triples
# with subject class p1:FileNode and predicate p1:updater.
#
# Line 14 indicates that the rdf:first predicate has a range that
# includes both the p1:FileNode class (having 3 instances) and 
# an unknown class (having 1 instance), for a total of 4 
# distinct instances.  In this case, the unknown class was due
# to <http://localhost/node/multiplier.txt> on input line 8, 
# as it was not declared with any rdf:type .  Remember that 
# rdf:first" and rdf:rest are auto-generated from Turtle 
# list syntax ( ... ).
#
# Line 17 indicates that there was one distinct instance of class 
# rdf:Class as a subject.
#
# Line 20: In this example there were no root classes, i.e., 
# classes whose instances never appear in the object position,
# but if there had been, then each would have been marked
# with an asterisk.
#
# DEPENDENCIES
# This script depends on some other perl modules.  To install
# them, execute the following shell commands:
#
#   cpan  RDF::Trine
#   cpan  RDF::Trine::Model
#   cpan  RDF::Trine::Statement
#   cpan  RDF::Trine::Node::Resource
#
# TROUBLESHOOTING
# If summarize-rdf is run with the Perl Redland binding installed
# (which do not work as of this writing 7/30/14), then Trine will
# try to load the Redland turtle parser but it will fail with:
#   Name "_p_librdf_world_s::OWNER" used only once: possible typo at /usr/share/perl5/RDF/Redland.pm line 49.
# In this case the solution is to uninstall the Redland Perl binding
# using the Ubuntu Software Center.

############################################################

use RDF::Trine;
use RDF::Trine::Model;
use RDF::Trine::Statement;
use RDF::Trine::Node::Resource;

my %inverseStandardNamespaces = (
        'dc',     'http://purl.org/dc/elements/1.1/',
        'fn',     'http://www.w3.org/2005/xpath-functions#',
        'owl',    'http://www.w3.org/2002/07/owl#',
        'prov',   'http://www.w3.org/ns/prov-o/',
        'rdf',    'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
        'rdfs',   'http://www.w3.org/2000/01/rdf-schema#',
        'skos',   'http://www.w3.org/2004/02/skos/core#',
        'time',   'http://www.w3.org/2006/time#',
        'xsd',    'http://www.w3.org/2001/XMLSchema#',
        );
my %standardNamespaces = map {($inverseStandardNamespaces{$_}, $_)}
		keys %inverseStandardNamespaces;
keys %standardNamespaces == keys %inverseStandardNamespaces or die;

my %namespaces;		# Remembers namespaces seen, stripped by &ShortenUri
my $nextPrefix = "p1";

my $RDF_TYPE         = RDF::Trine::Node::Resource->new($inverseStandardNamespaces{rdf} . "type");
my $RDF_NIL          = RDF::Trine::Node::Resource->new($inverseStandardNamespaces{rdf} . "nil");
my $RDF_LIST         = RDF::Trine::Node::Resource->new($inverseStandardNamespaces{rdf} . "List");
my $RDF_FIRST        = RDF::Trine::Node::Resource->new($inverseStandardNamespaces{rdf} . "first");
my $RDF_REST         = RDF::Trine::Node::Resource->new($inverseStandardNamespaces{rdf} . "rest");
my $RDFS_CLASS       = RDF::Trine::Node::Resource->new($inverseStandardNamespaces{rdfs} . "Class");
my $RDFS_SUBCLASS_OF = RDF::Trine::Node::Resource->new($inverseStandardNamespaces{rdfs} . "subClassOf");

################## Get options ###################

my $impliedRanges = 0;
my $help = 0;
use Getopt::Long; # Perl
GetOptions(
                "help|h" => \$help,
                "impliedRanges|i" => \$impliedRanges,
                ) or die "$0: Error reading options.\n";

die "Usage: $0 [ options ] [ turtleFiles...]
Options:
	-i, --impliedRanges
		Include implied classes (based on predicate ranges) 
		for nodes with no declared class.  For example, given
		  :s :p :o .
		then :o is implicitly declared as:
		  :o a :pRange .
		Implied classes are shown in parentheses: \"(:pRange)\"

	-h, --help
		Print usage info and exit
" if $help;

###################### Read RDF ######################
# my $subject = RDF::Trine::Node::Resource->new('http://example.org/aircraft/B787');
# my $predicate = RDF::Trine::Node::Resource->new('http://purl.org/dc/terms/title');
# my $object = RDF::Trine::Node::Literal->new('Boeing 787', 'en');
# my $ss = $subject->as_string();
# print "subject: $ss\n";
# my $statement = RDF::Trine::Statement->new($subject, $predicate, $object);
my $model = RDF::Trine::Model->temporary_model;
my $parser = RDF::Trine::Parser->new( 'turtle' );
my $base_uri = "http://example/";
print "===== Input Summary =====\n";
foreach my $file (@ARGV) {
	print "Parsing turtle: $file \n";
	$parser->parse_file_into_model( $base_uri, $file, $model );
	}
if (!@ARGV) {
	my $turtle = join("", <>);	# Slurp stdin
	$parser->parse_into_model( $base_uri, $turtle, $model );
	}
my $n = $model->size();
print "Total triples: $n\n";

my %typesOf;		# Node -> hash of declared types or datatypes
my %typeInstances;	# {URI, LITERAL, BLANK} -> hash of instances
my %datatypeValues;	# datatypes -> hash of values
my %predicateSubjects;	# predicates -> hash of subjects
my %predicateObjects;	# predicates -> hash of objects
my %isDatatype;		# Remember whether a URI is a datatype
my %subjectPredicates;	# Maps subjects -> hash of predicates
my %objectPredicates;	# Maps objects -> hash of predicates
my %isImpliedClass;	# True if this class was range implied by predicate
my $si = $model->get_statements(undef, undef, undef);
while (my $ts = $si->next()) {
	my $s = $ts->subject();
	my $p = $ts->predicate();
	my $o = $ts->object();
	# WARNING: when $s $p or $o are used as hash indexes they
	# are silently turned into strings first, so if you use keys %hash
	# to get them back from a hash, you will get strings -- NOT objects.
	$subjectPredicates{$s}->{$p} = 1;
	$objectPredicates{$o}->{$p} = 1;
	# print "\t$s $p $o\n";
	if ($p->equal($RDF_TYPE)) {
		$typesOf{$s}->{$o} = 1;
		$typesOf{$o}->{$RDFS_CLASS} = 1;
		}
	if ($p->equal($RDFS_SUBCLASS_OF)) {
		$typesOf{$s}->{$RDFS_CLASS} = 1;
		$typesOf{$o}->{$RDFS_CLASS} = 1;
		}
	my $t = $o->type();
	$typeInstances{$t}->{$o} = 1;
	if ($t eq "LITERAL") {
		my $dt = $o->literal_datatype() || "UNTYPED";
		$typesOf{$o}->{$dt} = 1;
		#### TODO: This naively assumes that a datatype URI will
		#### never be used as a class name in an rdf:type declaration:
		$isDatatype{$dt} = 1;
		my $v = $o->value();
		$datatypeValues{$dt}->{$v} = 1;
		# print "  LITERAL($dt): $s $p $o\n";
		}
	$typesOf{$s}->{$RDF_LIST} = 1 if $s->equal($RDF_NIL);
	$typesOf{$o}->{$RDF_LIST} = 1 if $o->equal($RDF_NIL);
	$typesOf{$s}->{$RDF_LIST} = 1 if $p->equal($RDF_FIRST);
	if ($p->equal($RDF_REST)) {
		$typesOf{$s}->{$RDF_LIST} = 1;
		$typesOf{$o}->{$RDF_LIST} = 1;
		}
	$predicateSubjects{$p}->{$s} = 1;
	$predicateObjects{$p}->{$o} = 1;
	# print "\t$s $p $o type: $t\n";
	}

if ($impliedRanges) {
  # Load implied range classes into %typesOf.  This is done in
  # two steps in order to load *all* implied range classes for a
  # given object, rather than stopping after the first.
  foreach my $o (sort keys %objectPredicates) {
    next if !&IsObjectInteresting($o);
    my $shortO = &ShortenUri($o);
    # warn "TypesOf($shortO) = " . join(" ", map {&ShortenUri($_)} &TypesOf($o)) . "\n";
    next if keys %{$typesOf{$o}};
    foreach my $p (sort keys %{$objectPredicates{$o}}) {
      next if !&IsPredicateInteresting($p);
      my $pUri = $p;
      $pUri =~ s/\>$/Range\>/ or die "0: [ERROR] Bad predicate: $p\n";
      # my $pClass = RDF::Trine::Node::Resource->new($pUri);
      $isImpliedClass{$pUri} = 1;
      $typesOf{$o}->{$pUri} = 1;
      }
    }
  # The rest of the work will be done by ShortenUri.
  }

print "Nodes by kind:  ";
foreach my $t (sort keys %typeInstances) {
my @instances = keys %{$typeInstances{$t}};
my $ni = scalar(@instances);
print "$t $ni  ";
}
print "\n";

print "Literals by datatype:  ";
foreach my $dt (sort keys %datatypeValues) {
	my @values = keys %{$datatypeValues{$dt}};
	my $nv = scalar(@values);
	my $sdt = &ShortenUri($dt);
	print "$sdt $nv  ";
	}
print "\n";
print "\n";

# Determine the classes for each subject (including any that are UNK):
my %classInstances;	# Maps subject classes -> hash of instances
my %classPredicates;	# Maps subject classes -> hash of predicates
foreach my $s (keys %subjectPredicates) {
	my @predicates = keys %{$subjectPredicates{$s}};
	foreach my $c (&TypesOf($s)) {
		# print "s: $s c: $c\n";
		$classInstances{$c}->{$s} = 1;
		foreach my $p (@predicates) {
			$classPredicates{$c}->{$p} = 1;
			}
		}
	}

# Figure out which subject classes are root classes.  A root class is
# a class whose instances never appear in the object position of a triple.
my %isRootClass = map {($_,1)} keys %classInstances;
foreach my $o (keys %objectPredicates) {
	my @types = &TypesOf($o);
	foreach my $t (@types) {
		$isRootClass{$t} = 0;
		}
	}

# Count the triples by subject class and predicate.
my %nTriples;
$si = $model->get_statements(undef, undef, undef);
while (my $ts = $si->next()) {
	my $s = $ts->subject();
	my $p = $ts->predicate();
	my $o = $ts->object();
	foreach my $t (&TypesOf($s)) {
		$nTriples{$t}->{$p}++;
		}
	}

print "===== Predicates by Subject Class =====\n";
my @sortedClasses = sort {&ShortenUri($a) cmp &ShortenUri($b)}
		keys %classInstances;
foreach my $c (@sortedClasses) {
	my $isRoot = "";
	$isRoot = "*" if $isRootClass{$c};
	my $sc = &ShortenUri($c);
	my @instances = keys %{$classInstances{$c}};
	my $ni = scalar(@instances);
	print "$isRoot$sc $ni\n";
	my @sortedPredicates = sort {&ShortenUri($a) cmp &ShortenUri($b)}
			keys %{$classPredicates{$c}};
	foreach my $p (@sortedPredicates) {
		my $sp = &ShortenUri($p);
		# Number of triples using this predicate:
		my $nt = $nTriples{$c}->{$p} || die;
		print "  $sp $nt -> { ";
		my %oClasses;
		my @objects = keys %{$predicateObjects{$p}};
		foreach my $o (@objects) {
			my @types = &TypesOf($o);
			foreach my $t (@types) {
				$oClasses{$t}++;
				}
			}
		foreach my $c (sort keys %oClasses) {
			my $nc = $oClasses{$c};
			my $sc = &ShortenUri($c);
			$sc = "($sc)" if $isDatatype{$c};
			print "$sc $nc ";
			}
		my $no = scalar(@objects);
		print "} $no\n";
		}
	print "\n";
	}

print "* Indicates a root class, whose instances are never objects.\n";
print "\n";

print "===== Namespaces =====\n";
foreach my $ns (sort {$namespaces{$a} cmp $namespaces{$b}} keys %namespaces) {
	my $p = $namespaces{$ns};
	print "PREFIX $p: <$ns> \n";
	}
exit 0;

############################################################################
#                          END OF MAIN                                     #
############################################################################

############## IsPredicateInteresting ##############
# This is a helper for determining implied range classes based on predicates,
# given predicate $p.
sub IsPredicateInteresting
{
@_ == 1 || die;
my ($p) = @_;
return 0 if $p->equal($RDF_NIL);
return 0 if $p->equal($RDF_FIRST);
return 0 if $p->equal($RDF_REST);
return 0 if $p->equal($RDF_TYPE);
return 0 if $p->equal($RDFS_SUBCLASS_OF);
return 1;
}

############## IsObjectInteresting ##############
# This is a helper for determining implied range classes based on predicates,
# given object $o.
sub IsObjectInteresting
{
@_ == 1 || die;
my ($o) = @_;
return 0 if $o->is_literal();
return 0 if $o->equal($RDF_NIL);
return 0 if $o->equal($RDF_FIRST);
return 0 if $o->equal($RDF_REST);
return 0 if $o->equal($RDF_LIST);
return 0 if $o->equal($RDFS_CLASS);
return 1;
}

######################## TypesOf ########################
# Look up the type of a subject (from global %typesOf) or default to UNK.
sub TypesOf
{
my $s = shift;
my @types = keys %{$typesOf{$s}};
return @types if @types;
return ( "UNKNOWN" );
}

######################## ShortenUri ########################
# Shorten the URI by stripping and remembering (in global %namespaces)
# the part before last slash or hash.  Also uses global %isImpliedClass.
sub ShortenUri
{
my $uri = shift;
my $originalUri = $uri;
$uri = $uri->as_string() if ref $uri && $uri->is_node();
$uri = $1 if $uri =~ m/^\<(.*)\>$/;
return $uri if $uri =~ m/^\"/ || $uri =~ m/\"$/;	# Ignore literals
return $uri if $uri !~ s/(^.*[\/\#])(.)/$2/;
my $ns = $1;
my $prefix = $namespaces{$ns} || $standardNamespaces{$ns} || $nextPrefix++;
$namespaces{$ns} = $prefix;
my $result = "$prefix:$uri";
$result = "($result)" if $isImpliedClass{$originalUri};
return $result;
}

