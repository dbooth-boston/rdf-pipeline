#! /usr/bin/perl -w

# Copyright 2014 by David Booth
# This software is available as free and open source under
# the Apache 2.0 software license, which may be viewed at
# http://www.apache.org/licenses/LICENSE-2.0.html
# Code home: https://github.com/dbooth-boston/rdf-pipeline/

# Copy TSV stdin to stdout, selecting columns by name.
# The first input line must be a header line
# containing the tab-separated column names.
# This program is analogous to the standard Unix "cut" command,
# but specifies columns by name instead of by numeric position.

sub DieUsage
{
die "Usage: select columnA ... < inFile.txt  > outFile.txt
where columnA ...  are column names\n"
}

warn "$0: [WARNING] No columns specified\n" if !@ARGV;
my @desiredColumns = @ARGV;
@ARGV = ();

# Initialize column numbers from header line
my %column;             # Maps header -> column index
my $headerLine = <STDIN>;
die "$0: ERROR: Empty input\n" if !defined($headerLine);
my @fields = split(/\t/, $headerLine, -1);
for (my $j=0; $j<@fields; $j++) {
        $column{$fields[$j]} = $j;
        # warn "column{fields[$j]} = column{$fields[$j]} = $column{$fields[$j]}\n";
        }
my $firstOutLine = join("\t", @desiredColumns);
print "$firstOutLine\n";

# Copy stdin to stdout, selecting columns.
while (1) {
	my $line = <STDIN>;
	last if !defined($line);
        my @fields = split(/\t/, $line, -1);
	my $outLine = "";
	foreach my $col (@desiredColumns) {
		my $i = $column{$col};
		die "$0: [ERROR] Column not found in input: $col\n" if !defined($i);
		my $val = $fields[$i];
		$val = "" if !defined($val);
		$outLine .= "\t" if length($outLine) > 0;
		$outLine .= $val;
		}
	print "$outLine\n";
        }
exit 0;

